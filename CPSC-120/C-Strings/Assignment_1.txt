A C-String originates from the C programming language whereas the String is based off the C++ programming language. 

With a C-String, the programmer is manually creating the string from scratch (by means of a char array). This array doesn't have a terminating portion to the end of its array, so a NULL terminator (/0) is the suggested way of identifying when the program has hit the end of the array. When you are creating the array for your C-String, you will need to have an extra index for the NULL terminator. An example of this is the following:
  Kelly wants to store the word "Allocation" to a C-String. In order to do this, Kelly will need to create a char array of 11 indexes (10 for the word, 1 for the NULL Terminator). From there, Kelley will need to copy the string into the C-String, character by character. If Kelley wanted to store a larger word into the C-String, she would have to create some functionality that would create an appropriately sized array and set the new word to that array. There is a function to get the strings length (strlen), but other functions like finding a substring or deleting sections of the C-String are manually created from the programmer. The beauty of the C-String is that is is lightweight by default. It doesn't contain a list of functions that are unessecary to the developer, allowing for less memory alocation overall. If I were to evaluate this to a car, it would be like a Buick. A Buick isn't something amazing to look at, but it is reliable and gets you from point A to point B.

With a typical String, most of the creation process is hidden in the background. If Kelly wanted wanted to store the word "Allocation" to a String, then they would need to create a String object and set it equal to the value "Allocation". Unlike the C-String, Kelly didn't need to create functionality to copy the new word to the String (this is all done in the String library in the background). She also doesn't need to care about the NULL terminator anymore. If Kelly wanted to set the same String object to a larger or smaller word, she doesn't need to create the functionality to do that, it is done automatically in the String library. The String obiject has multiple functions by default, like getting the length of the String, finding a character or word in a string, and handling with deleting indexes in a String. The benefits of using the String library compared to using a C-String is that most of the functionality with the String is automated, whereas the C-String functionality is mainly created by default. A second benefit is that the String functionality has been heavily reviewed by others to have one of the best optimization algorithms for accomplishing each the desired functions in the String, compared to the functionality that is created by hand with a C-String. Some disadvantages to Strings compared to C-Strings is that each String object contains more memory compared to a C-String, meaning that it may cause a problem with memory restricted programs being created. A second downside is that this typically requires an extra library to be imported into the program (causing more memory usage).

Generally in most computers today, the differences in memory usage between a C-String and a String are negligible. If you are working on low-level embeded systems that have small amounts of memory available, they may use C-Strings over Strings. In most other cases Strings are used in order to create programs quicker without congesting your program with String manipulation functions. 
